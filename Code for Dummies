
Step 1 to setting up a website:
As you've seen in the previous projects, webpages should start with a DOCTYPE html declaration, followed by an html element.

Add a DOCTYPE html declaration at the top of the document, and an html element after that. Give the html element a lang attribute with en as its value.
 ex:  <!DOCTYPE html>
      <html lang="en"></html>
a - element used to anchor
 <a href='https://freecodecamp.org'></a>
 STep 2:
 To tell browsers how to encode characters on your page, set the charset to utf-8. utf-8 is a universal character set that includes almost every character from all human languages.

Inside the head element, nest a meta element with the attribute charset set to utf-8. Remember that meta elements are self-closing, and do not need a closing tag.
ex: <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
links
<p>Click here to view more <a href="https://freecatphotoapp.com">cat photos</a>.</p>


href (attribute) -  

attribute - activated with (attribute)="attribute value"

target attribute
_blank - example below. Ask alex how tf this makes sense 
```
      <p>Click here to view more <a href="https://freecatphotoapp.com"target=_blank>cat photos</a>.</p>
```
 <p>CLick here to view more <a href="https://freecatphotoapp.com">cat photoss</a>.</p>

Links 
https://www.freecodecamp.org/learn/2022/responsive-web-design/learn-html-by-building-a-cat-photo-app/step-14 

section - element

Image with alt example
<img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg" alt="A slice of lasagna on a plate">

Button with type and text example
<button type="Submit">Submit</button>

radio - bubble selector that switches back and forth
Have alex explain this:
If you select the Indoor radio button and submit the form, the form data for the button is based on its name and value attributes. Since your radio buttons do not have a value attribute, the form data will include indoor-outdoor=on, which is not useful when you have multiple buttons.

Add a value attribute to both radio buttons. For convenience, set the button's value attribute to the same value as its id attribute.

example code: <label><input value="indoor" id="indoor" type="radio" name="indoor-outdoor"> Indoor</label>
          <label><input value="outdoor" id="outdoor" type="radio" name="indoor-outdoor"> Outdoor</label>

fieldset - The fieldset element is used to group related inputs and labels together in a web form.

Ask Alex why this doesn't neet a closing tag:
<legend>What's your cat's personality?</legend>
            <input type="checkbox"> Loving 
						Alex said that input is self closing
One more thing. You should allow people to use their native language. Tell the browser to encode multiple languages by adding a meta element as a child of the head element. Set its charset attribute to UTF-8:
<head>
    <meta charset="UTF-8">
    <title>CatPhotoApp</title>
  </head>

	7/19/22
	Center Heading:
	"element/selector" {property: value;} ex:
 ^^ can add more properties to selectors after semicolon, just code on a new line for clean code
	<style>
      h1 {
        text-align: center;
      }
    </style>
		another example:
		<style>
      h1, h2, p {
        text-align: center;
      }
    </style>

		You have styled three elements by writing CSS inside the style tags. This works, but since there will be many more styles, it's best to put all the styles in a separate file and link to it.

We have created a separate styles.css file for you and switched the editor view to that file. You can change between files with the tabs at the top of the editor.

Start by rewriting the styles you have created into the styles.css file. Make sure to exclude the opening and closing style tags.

<style>
  h1, h2, p {
    text-align: center;
  }
  </style>

Mobile device 
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

/* comment here */ - a way to not have code show up or executed

Can change width with pixels (px) or percentage (%)

A class selector is defined by a name with a dot directly in front of it, like this
.class-name {
  styles
}

To apply the class's styling to the div element, add a class attribute to the div element's opening tag and set its value to menu. 
Ex: <div class="menu" />

test
code in style css tab :
body {
 font-family: sans-serif;
  background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);
}
fonts: You can add a fallback value for the font-family by adding another font name separated by a comma. Fallbacks are used in instances where the initial is not found/available.

Add the fallback font serif after the Impact font.

Notice how the thickness of the line looks bigger? The default value of a property named border-width is 1px for all edges of hr elements. By changing the border to the same color as the background, the total height of the line is 5px (3px plus the top and bottom border width of 1px).

You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.{ propertyName: propertyValue; }
ex: a:visited {
    color: grey;
}

You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }

You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.

To center your marker on the page, set its margin property to auto. This sets margin-top, margin-right, margin-bottom, and margin-left all to auto.

These days, there are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print. In this project you'll work with the RGB model


one way to set color to red in a class in CSS:
.one {
  background-color: rgb(255, 0, 0);
}
max of a color for red, green, blue = 255

background-color: rgb(0, 0, 0); black
background-color: rgb(255, 255, 255); white
Secondary colors---
background-color: rgb(255, 255, 0); yellow
background-color: rgb(0, 255, 255); cyan
background-color: rgb(255, 0, 255); magenta
Tertiary colors---
  background-color: rgb(255, 127, 0); orange
  background-color: rgb(0, 255, 127); spring green
	background-color: rgb(127, 0, 255); violet
	background-color: rgb(255, 0, 127); rose
	background-color: rgb(0, 127, 255); azure
	background-color: rgb(127, 255, 0); chartreuse 

	A very common way to apply color to an element with CSS is with hexadecimal or hex values. While hex values sound complicated, they're really just another form of RGB values.

Hex color values start with a # character and take six characters from 0-9 and A-F. The first pair of characters represent red, the second pair represent green, and the third pair represent blue. For example, #4B5320.

In the .green CSS rule, set the background-color property to a hex color code with the values 00 for red, FF for green, and 00 blue.
background-color: #00FF00;

You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:

0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).
ex: 00FF00 - high intensity green
    007F00 - lower intensity green

		The HSL color model, or hue, saturation, and lightness, is another way to represent colors.

The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.

If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.

Saturation is the intensity of a color from 0%, or gray, to 100% for pure color.

Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.
}
}
ex: background-color: hsl(240, 100%, 50%); blue

You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.

A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.

One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value. 
The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:

linear-gradient(gradientDirection, color1, color2, ...);
gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.
If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default. 
Now you'll apply a red-to-green gradient along a 90 degree line to the first marker.
ex:  background: linear-gradient(90deg, rgb(255, 0, 0));

Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function.

For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:

linear-gradient(90deg, red 90%, black) (no comam)
ex: background: linear-gradient(90deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));

Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more transparent, and you can see through the glass to the other side.

With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, the element will be completely opaque like it is by default.

Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.

You've already set sleeve's opacity with a named color and the opacity property, but you can add an alpha channel to the other CSS color properties.
ex: opacity: 0.5;

You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color, use the rgba function instead.

The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:

rgba(redValue, greenValue, blueValue, alphaValue);

ex: background-color: rgb(255, 255, 255, 0.5)

This is because the default display property for div elements is block. So when two block elements are next to each other, they stack like actual blocks. For example, your marker elements are all stacked on top of each other.

To position two div elements on the same line, set their display properties to inline-block

All HTML elements have borders, though they're usually set to none by default. With CSS, you can control all aspects of an element's border, and set the border on all sides, or just one side at a time. For a border to be visible, you need to set its width and style. 
ex: border-left-width: 10px;

Borders have several styles to choose from. You can make your border a solid line, but you can also use a dashed or dotted line if you prefer. Solid border lines are probably the most common.
ex: border-left-style: solid;

Your border should be visible now. If no color is set, black is used by default.

But to make your code more readable, it's better to set the border color explicitly.
ex: border-left-color: black;

The border-left shorthand property lets you to set the left border's width, style, and color at the same time.

Here is the syntax:

border-left: width style color;
border-left: 10px solid black;

The last thing you'll do is add a slight shadow to each marker to make them look even more realistic.

The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:

box-shadow: offsetX offsetY color;
ex: box-shadow: 5px 5px red;
can add negatives to move to the other side:
box-shadow: -5px -5px red;

Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:

box-shadow: offsetX offsetY blurRadius color;
If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.

ex: box-shadow: 5px 5px 5px green

But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:

box-shadow: offsetX offsetY blurRadius spreadRadius color;
ex: box-shadow: 0 0 0 5px blue;
    box-shadow: 0 0 20px 0 red;

The first input element with a type of submit is automatically set to submit its nearest parent form element.

To handle the form submission, after the last fieldset element add an input element with the type attribute set to submit and the value attribute set to Submit.


Basic Poiletplate:
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Nutrition Label</title>
</head>

<body>

</body>
</html>

Fine-tune the placement of your h1 by giving it a top and bottom margin of -4px and a left and right margin of 0.
margin: -4px 0;

to remove margins: 
margin: 0 ;

The letter-spacing property can be used to adjust the space between each character of text in an element.

Give your h1 selector a letter-spacing property set to 0.15px to space them out a bit more.

Nutrition labels have a lot of bold text to draw attention to important information. Rather than targeting each element that needs to be bold, it is more efficient to use a class to apply the bold styling to every element.

Give your second p element a class attribute set to bold.

The rem unit stands for root em, and is relative to the font size of the html element.

Create a .small-text selector and set the font-size to 0.85rem, which would calculate to roughly 13.6px (remember that you set your html to have a font-size of 16px):
.small-text {
  font-size: 0.85rem;
}

A useful property of an SVG (scalable vector graphics) is that it contains a path attribute which allows the image to be scaled without affecting the resolution of the resultant image.

Currently, the img is assuming its default size, which is too large. CSS has a max function which returns the largest of a set of comma-separated values. For example:

img {
  width: max(250px, 25vw);
}
In the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels. If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. This is because 25vw is equal to 25% of the viewport width.

Scale the image using its id as a selector, and setting the width to be the maximum of 100px or 18vw.

 <section role="region" aria-labelledby="student-info">
          <h2 id="student-info">Student Info</h2>
          <div class="info">
            <label for="student-name">Name:</label>
            <input id="student-name" />
          </div>
          <div class="info">
            <label for="student-email">Email:</label>
            <input id="student-email" />
          </div>
          <div class="info">
            <label for="birth-date">D.O.B.:</label>
            <input id="birth-date" />
          </div>
        </section>

Back to styling the page. Select the list elements within the navigation bar, and give them the following styles:

color: #dfdfe2;
margin: 0 0.2rem;
padding: 0.2rem;
display: block;

nav > ul> li {
  color: #dfdfe2;
  margin: 0 0.2rem;
  padding: 0.2rem;
  display: block;
}
To make the navigation buttons look more like typical buttons, remove the underline from the anchor tags.

Then, create a new selector targeting the navigation list elements so that when the cursor hovers over them, the background color and text color are switched, and the cursor becomes a pointer.
nav > ul > li:hover {
  background-color: #dfdfe2;
  color: #1b1b32;
  cursor: pointer;
}

li > a {
  color: inherit;
  text-decoration: none;
}
Tidy up the header, by using Flexbox to put space between the children, and vertically center them.

Then, fix the header to the top of the viewport.
header {
  width: 100%;
  height: 50px;
  background-color: #1b1b32;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  top: 0; 
}

When the screen width is small, the h1 does not wrap its text content how it should. Align the text for the h1 element in the center.

Then, give the main padding such that the Student Info section header can be fully seen.
h1 {
  color: #f1be32;
  font-size: min(5vw, 1.2em);
  text-align: center;
}

main {
  padding-top: 25px;
}

Adding padding to top and left: 
.info {
  padding: 1px 0 0 1px;
}

Give the .formrow elements top margin, and left and right padding. The other padding values should be 0.

Then, increase the font size for all input elements.
formrow {
  margin-top: 30px;
  padding: 0px 15px;
}
input {
  font-size: 16px;
}

To make the first section look more inline, target only the input elements within .info elements, and set their width to 50%, and left-align their text:
.info > input {
  width: 50%;
  text-align: left;
}

To align the input boxes with each other, create a new ruleset that targets all input and label elements within an .info element and set the display property to inline-block.

Also, align the label element's text to the right.
.info > label, .info > input {
  display: inline-block;
}

While ul/li elements are great at providing bullets for list items, your radio buttons don't need them. You can control what the bullets look with the list-style property. For example you can turn your bullets into circles with the following:

ul {
  list-style: circle;
}
Remove the default styling for the .answers-list items by setting its style to none, and remove the unordered list padding.
.answers-list {
  list-style: none;
  padding: 0;
}  

Set the footer background color to #2a2a40, and use Flexbox to horizontally center the text.
footer {
  background-color: #2a2a40;
  display: flex;
  justify-content: center;
}

Horizontally center all the text within the address element, and add some padding.
address {
  text-align: center;
  padding: 1px;
}

Certain types of motion-based animations can cause discomfort for some users. In particular, people with vestibular disorders have sensitivity to certain motion triggers.

The @media at-rule has a media feature called prefers-reduced-motion to set CSS based on the user's preferences. It can take one of the following values:

reduce
no-preference
@media (feature: value) {
  selector {
    styles
  }
}
Wrap the style rule that sets scroll-behavior: smooth within an @media at-rule with the media feature prefers-reduced-motion having no-preference set as the value.
@media (prefers-reduced-motion: no-preference) {
* {
  scroll-behavior: smooth;
}
}

EXAMPLE of basic boilerplate:
<!DOCTYPE html>
<html lang="en">
  <head><meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" >
  <title>Balancing Sheet</title>
  <link href="styles.css" rel="stylesheet">
  </head>
  <body></body>
  </html>

  The thead and tbody elements are used to indicate which portion of your table is the header, and which portion contains the primary data or content.

Add a thead and tbody to your first table, below the caption element.
The td element indicates a data cell, while the th element indicates a header cell.

Before you get too far into your styling, you should make use of the sr-only class. You can use CSS to make elements with this class completely hidden from the visual page, but still be announced by screen readers.

The CSS you are about to write is a common set of properties used to ensure elements are completely hidden visually.

The span[class~="sr-only"] selector will select any span element whose class includes sr-only. Create that selector, and give it a border property set to 0.

The CSS clip property is used to define the visible portions of an element. Set the span[class~="sr-only"] selector to have a clip property of rect(1px, 1px, 1px, 1px).

The clip-path property determines the shape the clip property should take. Set the clip-path property to the value of inset(50%), forming the clip-path into a rectangle within the element.

The calc() function is a CSS function that allows you to calculate a value based on other values. For example, you can use it to calculate the width of the viewport minus the margin of an element:

.example {
  margin: 10px;
  width: calc(100% - 20px);
}

The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, any of your span elements that do not have the sr-only class. This ensures that your earlier rules for the span[class~="sr-only"] selector are not overwritten.

Now target the th elements within your table body, and give them a width of the entire container, less 12rem. 
tbody th {
  width: calc(100% - 12rem)
}

The [attribute="value"] selector targets any element that has an attribute with a specific value. Create a tr[class="total"] selector to target specifically your tr elements with the total class. Give it a bottom border of 4px double #0a0a23 and make the font bold.

 tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

Using the same selector syntax, target the th elements within your table rows where the class is total. Align the text to the left, and give them a padding of 0.5rem 0 0.25rem 0.5rem.
tr[class="total"] th{
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}

The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type. Use this pseudo-selector to target the third td element within your total table rows. Give it a right padding of 0.5rem.
tr.total td:nth-of-type(3) {
  padding: 0.5rem;
}

Give your tr.total elements a hover effect that changes the background to #99c9ff.

tr.total:hover {
  background: #99c9ff;
}

Select your td elements with the class value of current, and make the font italic.
td.current{
  font-style: italic;
}

Create another selector for the td elements within your tr.data element, but specifically select the last one. Give this a right padding of 0.5rem:

tr.data td:last-of-type {
 padding-right: 0.5rem;  
}

Use the universal selector to add box-sizing: border-box; to your CSS. This ensures elements include padding and border in their specified width and height.
* {
  box-sizing: border-box;
}

To see the .cat-head element, give it a linear gradient background with #5e5e5e at 85% and #45454f at 100%.

You might not notice the difference between these two colors, but they are there.
background: linear-gradient(#5e5e5e 85%, #45454f 100%);

CSS positioning lets you set how you want an element to be positioned in the browser. It has a position property you can set to static, absolute, relative, sticky or fixed.

Once you set the position property of the element, you can move the element around by setting a pixel or a percentage value for one or more of the top, right, left, or bottom properties.

static is the default positioning for all elements. If you assign it to an element, you won't be able to move it around with top, right, left, or bottom.

Give .cat-head a position property of static, then set the top and left properties to 100px each.

position: static ; 
  top: 100px;
  left: 100px;
}

You could see that nothing happens. The .cat-head element did not move despite setting a top and left of 100px each. But that's not the case with relative positioning.

When you use the relative value, the element is still positioned according to the normal flow of the document, but the top, left, bottom, and right values become active.

Instead of static, give your .cat-head a position of relative, and leave both top and left properties as they are.
position: relative ; 
  top: 100px;
  left: 100px;
}

To position the left ear properly, you can use CSS transform to rotate it in a certain degree.

The transform property allows you to modify the shape, position, and size of an element without changing the layout or affecting the surrounding elements. It has functions such as translate(), rotate(), scale(), skew(), and matrix().

Set the transform property to rotate(-45deg) and see what happens.

 Now that you have reset the html box model, you need to pass that on to the elements within as well. To do this, you can set the box-sizing property to inherit, which will tell the targeted elements to use the same value as the parent element.

You will also need to target the pseudo-elements, which are special keywords that follow a selector. The two pseudo-elements you will be using are the ::before and ::after pseudo-elements.

The ::before selector creates a pseudo-element which is the first child of the selected element, while the ::after selector creates a pseudo-element which is the last child of the selected element. These pseudo-elements are often used to create cosmetic content, which you will see later in this project.

For now, create a CSS selector to target all elements with *, and include the pseudo-elements with ::before and ::after. Set the box-sizing property to inherit.

Step 27
The @media at-rule, also known as a media query, is used to conditionally apply CSS. Media queries are commonly used to apply CSS based on the viewport width using the max-width and min-width properties.

In the below example the padding is applied to the .card class when the viewport is 960px wide and below.

@media (max-width: 960px) {
  .card {
    padding: 2rem;
  }
}
Add a media query that will be applied when the viewport is 768px wide and below.

Step 32
Logical operators can be used to construct more complex media queries. The and logical operator is used to query two media conditions.

For example, a media query that targets a display width between 500px and 1000px would be:

@media (min-width: 500px) and (max-width: 1000px){

}
Add another @media rule to apply if the browser window is wider than 769px but smaller than 1199px.
 
 Navigation Bar & how to link:
<nav id="navbar">
    <header>Documentation</header>
            <a href="#Introduction" class="nav-link">Introduction</a>
            <a href="#Contacts" class="nav-link">Contacts</a>
            <a href="#Staff" 
class="nav-link">Staff</a>
            <a href="#Events" class="nav-link">Events</a>
            <a href="#Gallery" class="nav-link">Gallery</a>
            <a href="#Locations" class="nav-link">Locations</a>
        
  </nav>

  Gradients in CSS are a way to transition between colors across the distance of an element. They are applied to the background property and the syntax looks like this:

gradient-type(
  color1,
  color2
);
 Linking fonts + Stylesheet
<title>Magazine</title>
    <link
      href="https://fonts.googleapis.com/css?family=Anton%7CBaskervville%7CRaleway&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://use.fontawesome.com/releases/v5.8.2/css/all.css"
    />
    <link rel="stylesheet" href="styles.css" />

    Now you are ready to start putting together the grid layout. CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements.

Begin by creating a main selector and giving it a display property set to grid.

Step 52
If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional columns. As an alternative, you can use the grid-auto-flow property.

This property takes either row or column as the first value, with an optional second value of dense. grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create new columns for content as needed. The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.

For your .social-icons selector, set the grid-auto-flow property to column.
Step 59
The other text has been shifted out of place. Move it into position by giving the .first-paragraph::first-letter selector a float property set to left and a margin-right property set to 1rem.
Step 75
The place-items property can be used to set the align-items and justify-items values at the same time. The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property.

Give the .image-wrapper selector a place-items property set to center.